{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","file","setFile","useState","jobId","setJobId","status","setStatus","checkStatus","async","res","fetch","json","React","useEffect","interval","setInterval","clearInterval","createElement","className","type","onChange","e","target","files","onClick","alert","formData","FormData","append","uploadRes","method","body","url","jobRes","headers","JSON","stringify","fileUrl","gpu","href","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"oNA4DeA,MAzDf,WACE,MAAOC,EAAMC,GAAWC,mBAAS,OAC1BC,EAAOC,GAAYF,mBAAS,OAC5BG,EAAQC,GAAaJ,mBAAS,IAqB/BK,EAAcC,UAClB,IAAKL,EAAO,OACZ,MAAMM,QAAYC,MAAM,uCAAuCP,IACzD,OAAEE,SAAiBI,EAAIE,OAC7BL,EAAUD,IAUZ,OAPAO,IAAMC,UAAU,KACd,GAAIV,EAAO,CACT,MAAMW,EAAWC,YAAYR,EAAa,KAC1C,MAAO,IAAMS,cAAcF,KAE5B,CAACX,IAGFS,IAAAK,cAAA,OAAKC,UAAU,OACbN,IAAAK,cAAA,UAAI,qEACJL,IAAAK,cAAA,SAAG,iEACHL,IAAAK,cAAA,SAAOE,KAAK,OAAOC,SAAWC,GAAMpB,EAAQoB,EAAEC,OAAOC,MAAM,MAC3DX,IAAAK,cAAA,UAAQO,QAtCMhB,UAChB,IAAKR,EAAM,OAAOyB,MAAM,wBACxB,MAAMC,EAAW,IAAIC,SACrBD,EAASE,OAAO,OAAQ5B,GACxB,MAAM6B,QAAkBnB,MAAM,sCAAuC,CACnEoB,OAAQ,OACRC,KAAML,KAEF,IAAEM,SAAcH,EAAUlB,OAC1BsB,QAAevB,MAAM,mCAAoC,CAC7DoB,OAAQ,OACRI,QAAS,CAAE,eAAgB,oBAC3BH,KAAMI,KAAKC,UAAU,CAAEC,QAASL,EAAKM,IAAK,WAEtC,MAAEnC,SAAgB8B,EAAOtB,OAC/BP,EAASD,GACTG,EAAU,YAsBoB,WAC3BH,GACCS,IAAAK,cAAA,WACEL,IAAAK,cAAA,SAAG,WAASd,GACZS,IAAAK,cAAA,SAAG,WAASZ,GACA,SAAXA,GACCO,IAAAK,cAAA,KAAGsB,KAAM,yCAAyCpC,GAAS,uBCxCxDqC,MAZSC,IAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,KAAKC,IAAkD,IAAjD,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,QAAEC,GAASL,EACpEC,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAOP,GACPQ,EAAQR,MCDDS,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACH1C,IAAAK,cAACL,IAAM2C,WAAU,KACf3C,IAAAK,cAAClB,EAAG,QAORyC,K","file":"static/js/main.4602c0d9.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\n\nfunction App() {\n  const [file, setFile] = useState(null);\n  const [jobId, setJobId] = useState(null);\n  const [status, setStatus] = useState('');\n\n  const handleRun = async () => {\n    if (!file) return alert('Please upload a file');\n    const formData = new FormData();\n    formData.append('file', file);\n    const uploadRes = await fetch('https://your-fly-app.fly.dev/upload', {\n      method: 'POST',\n      body: formData,\n    });\n    const { url } = await uploadRes.json();\n    const jobRes = await fetch('https://your-fly-app.fly.dev/run', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ fileUrl: url, gpu: 'A40' }),\n    });\n    const { jobId } = await jobRes.json();\n    setJobId(jobId);\n    setStatus('queued');\n  };\n\n  const checkStatus = async () => {\n    if (!jobId) return;\n    const res = await fetch(`https://your-fly-app.fly.dev/status/${jobId}`);\n    const { status } = await res.json();\n    setStatus(status);\n  };\n\n  React.useEffect(() => {\n    if (jobId) {\n      const interval = setInterval(checkStatus, 5000);\n      return () => clearInterval(interval);\n    }\n  }, [jobId]);\n\n  return (\n    <div className=\"App\">\n      <h1>AI GPU Cloud - $1.25 CAD/hour (30-min minimum) + $0.50 CAD upload</h1>\n      <p>Upload your script or model and run it instantly on our GPUs.</p>\n      <input type=\"file\" onChange={(e) => setFile(e.target.files[0])} />\n      <button onClick={handleRun}>Run Now</button>\n      {jobId && (\n        <div>\n          <p>Job ID: {jobId}</p>\n          <p>Status: {status}</p>\n          {status === 'done' && (\n            <a href={`https://your-fly-app.fly.dev/download/${jobId}`}>Download Results</a>\n          )}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}